
# TODO, move to some file devoted to srt operations
def write_srt_from_sentences_and_time_ranges(
    sentences,
    time_ranges,
    output_file_path,
    max_chars_per_segment=90,
):
    punc = r'(?<=[.!?,:;])\s+|\.$|(?<=[।۔՝։።။។፡。！？])'
    segments = []  # List of triplets (text, start_time, end_time)
    mcps = max_chars_per_segment
    for sentence, time_range in zip(sentences, time_ranges):
        start_time, end_time = time_range
        n_chars = len(sentence)
        if n_chars == 0:
            continue
        # Bias towards cuts which are on punctuation marks,
        # and try to keep the segments from being too uneven
        n_segments = int(np.ceil(n_chars / mcps))
        best_step = (n_chars // n_segments)
        half = mcps // 2
        cuts = [0]
        while cuts[-1] < n_chars:
            lh = cuts[-1]
            rh = lh + mcps
            best_cut = lh + best_step
            if rh >= n_chars:
                cuts.append(n_chars)
                continue
            # Try cutting at a nearby punctuation mark
            punc_indices = [
                lh + half + match.end()
                for match in regex.finditer(punc, sentence[lh + half:rh])
            ]
            if punc_indices:
                index = np.argmin([abs(pi - best_cut) for pi in punc_indices])
                cuts.append(punc_indices[index])
                continue
            # Otherwise, try a nearby space
            space_indices = [
                lh + half + match.end()
                for match in regex.finditer(" ", sentence[lh + half:rh])
            ]
            if space_indices:
                index = np.argmin([abs(si - best_cut) for si in space_indices])
                cuts.append(space_indices[index])
                continue
            # Otherwise, e.g. in character-based languages, just take what you can get
            else:
                cuts.append(best_cut)
        cuts.sort()
        for lh, rh in zip(cuts, cuts[1:]):
            segments.append((
                sentence[lh:rh],
                interpolate(start_time, end_time, lh / n_chars),
                interpolate(start_time, end_time, rh / n_chars),
            ))
    ## Write the srt
    write_srt(segments, output_file_path)
